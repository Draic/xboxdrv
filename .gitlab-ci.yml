# use the official gcc image, based on debian
# can use verions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/
image: gcc

build:
  stage: build
  before_script:
    - apt -qq update
    - apt -y install lsb-release
    - lsb_release -a
    - apt -y install build-essential
    # - apt -y install clang-5.0
    - apt -y install make
    - apt -y install cmake
    - apt -y install g++-4.9
    - apt -y install libboost-all-dev
    - apt -y install libboost-dev
    - apt -y install libc++-dev
    - apt -y install libcwiid-dev
    - apt -y install libdbus-glib-1-dev
    - apt -y install libgtk2.0-dev
    - apt -y install libudev-dev
    - apt -y install libusb-1.0-0-dev
    - apt -y install libx11-dev
    - apt -y install pkg-config
    - apt -y install x11proto-core-dev
  script:
    - mkdir build
    - cd build
    - cmake ..
    - make
  # artifacts:
  #   paths:
  #     - mybinary
  # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
  # cache:
  #   paths:
  #     - "*.o"

# run tests using the binary built before
# test:
#   stage: test
#   script:
#     - ./runmytests.sh
